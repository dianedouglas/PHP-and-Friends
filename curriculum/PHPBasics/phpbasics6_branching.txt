OK, that was tricky. But you did it! You're here aren't you? A lot of advanced programmers struggle with scope for a long time, but you're getting it under your belt early. If it still doesn't make sense in a couple days, go re-read it and it'll probably be easier the second time around.

Now our programs can start to think for themselves. We're going to teach them to make decisions by **branching**.

Our functions can't just go through life always capitalizing or reversing our strings. What if sometimes we want lowercase, and sometimes we don't? We have to explain that to a function. There are only three types of branching: if, switch and ternary statements. These are also called _conditionals_ because they rely on **conditions**.

First let's learn about if statements.

We are going to create a function that checks a user's age and prints out "You can drink!" if they are over 21, but prints out "No drinks for you!" if they are under 21. 

Our function's only input is the user's age. So our declaration looks like this (follow along in a new file):

```
function checkAge($user_age){

}
```

The condition we will be checking in our conditional is if the user is over 21 or not.

There are 3 keywords used as building blocks in if statements: `if`, `elseif`, and `else`. For this problem, we only need `if` and `else`.  Your code is executed from top to bottom, so think of it as a car driving down the road. When the car encounters an `if-else` statement it is like encountering a fork in the road. Either the code under the `if` will be executed, or the code under the `else` will be executed, depending on the expression in the parenthesis. If that expression is true, the `if` code runs. Otherwise the `else` code runs.

```
function checkAge($user_age){
	if ($user_age > 21){				//if the user's age is greater than 21...
		return "You can drink!";		//return this string.
	}
	else {								//otherwise...
		return "No drinks for you!";	//return this string.
	}
}
echo " <br> Hi checkAge function! My name is Barbara, and I'm 25. <br>";
echo checkAge(25);
echo " <br> Hi checkAge function! My name is Jim, and I'm 52. <br>";
echo checkAge(52);
echo " <br> Hi checkAge function! My name is Tiny Tim, and I'm 12. <br>";
echo checkAge(12);
```

The output will be:

```
Hi checkAge function! My name is Barbara, and I'm 25. 
You can drink! 
Hi checkAge function! My name is Jim, and I'm 52. 
You can drink! 
Hi checkAge function! My name is Tiny Tim, and I'm 12. 
No drinks for you!
```

After the `if` keyword, the expression inside the parenthesis is evaluated. The expression used with an if statement must be a **boolean condition**, which means it must evaluate to either `true` or `false`.  For example, our user is either over 21 or they aren't. This brings us to our fourth variable type called a **boolean**. It is just a very simple variable which is only allowed to have the two values: `true` or `false`. A boolean condition must evaluate to a boolean.

If the condition is `true`, meaning our user is over 21, then the code between the first set of curly brackets next to the `if` condition runs. If we get `false`, because our user is under 21, then the code in the curly brackets after the `else` keyword is run instead. So far we have talked about `integer`s, `float`s, and `strings`, now we can add `boolean`s to our collection of primitives.

What if we want to display the message "You must still be really excited about drinking!" to a user who's 21? Luckily the keywords `if` and `else` have a friend called `elseif`. It lets you define an alternate condition to look for, and it is structured just like `if`. So we can change our function to look like this:

```
function checkAge($user_age){
	if ($user_age > 21){				//if the user's age is greater than 21...
		return "You can drink!";		//return this string
	}
	elseif ($user_age == 21){			//if the user's age is not greater than 21 but it is equal to 21...
		return "You must still be really excited about drinking!"		
	else {								//otherwise...
		return "No drinks for you!";	//return this string.
	}
}
echo " <br> Hi checkAge function! My name is Sam, and I'm 21. <br>";
echo checkAge(25);

```
The expression after `if` in the parenthesis is evaluated to `true` or `false`. If it is `true`, the code in its brackets is triggered. If it is false, then the expression after `elseif` is evaluated. If that one is true, (the user is exactly 21), then the code in the next set of curly brackets is run. 

You can have as many `elseif` conditions as you want, but only one `if` condition, and it has to come first. If none of the `if` or `elseif` conditions evaluate to true, then the code in the curly brackets following the `else` keyword is run.

We'll go over ternaries and switches later. If statements are the most common, so let's practice them. And if you understand them then the other two branching methods are easy as pie. 





